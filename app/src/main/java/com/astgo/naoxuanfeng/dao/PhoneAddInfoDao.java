package com.astgo.naoxuanfeng.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PHONE_ADD_INFO".
*/
public class PhoneAddInfoDao extends AbstractDao<PhoneAddInfo, Long> {

    public static final String TABLENAME = "PHONE_ADD_INFO";

    /**
     * Properties of entity PhoneAddInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PhoneNum = new Property(1, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Province = new Property(2, String.class, "province", false, "PROVINCE");
        public final static Property Carrier = new Property(3, String.class, "carrier", false, "CARRIER");
        public final static Property City = new Property(4, String.class, "city", false, "CITY");
        public final static Property Friend = new Property(5, Integer.class, "friend", false, "FRIEND");
    };


    public PhoneAddInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneAddInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHONE_ADD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PHONE_NUM\" TEXT UNIQUE ," + // 1: phoneNum
                "\"PROVINCE\" TEXT NOT NULL ," + // 2: province
                "\"CARRIER\" TEXT," + // 3: carrier
                "\"CITY\" TEXT," + // 4: city
                "\"FRIEND\" INTEGER);"); // 5: friend
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PHONE_ADD_INFO_PHONE_NUM ON PHONE_ADD_INFO" +
                " (\"PHONE_NUM\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHONE_ADD_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhoneAddInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(2, phoneNum);
        }
        stmt.bindString(3, entity.getProvince());
 
        String carrier = entity.getCarrier();
        if (carrier != null) {
            stmt.bindString(4, carrier);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
 
        Integer friend = entity.getFriend();
        if (friend != null) {
            stmt.bindLong(6, friend);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PhoneAddInfo readEntity(Cursor cursor, int offset) {
        PhoneAddInfo entity = new PhoneAddInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phoneNum
            cursor.getString(offset + 2), // province
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // carrier
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // city
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // friend
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhoneAddInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhoneNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProvince(cursor.getString(offset + 2));
        entity.setCarrier(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFriend(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PhoneAddInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PhoneAddInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
